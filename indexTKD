<!doctype html>
<html lang="vi">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>B·∫£ng T·ªâ S·ªë Gi·∫£i Pickleball To√†n Di·ªán</title>
    <!-- T·∫£i Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- C·∫•u h√¨nh Tailwind cho font Inter v√† m√†u s·∫Øc c∆° b·∫£n -->
    <script>
        tailwind.config = {
            theme: {
                extend: {
                    colors: {
                        'primary': '#059669', // Emerald Green
                        'secondary': '#f97316', // Orange
                        'accent': '#1d4ed8', // Blue
                    },
                    fontFamily: {
                        sans: ['Inter', 'sans-serif'],
                    },
                }
            }
        }
    </script>
    <style>
        body {
            background-color: #f3f4f6; /* Gray-100 */
            font-family: 'Inter', sans-serif;
            min-height: 100vh;
        }
        .container {
            max-width: 100%;
        }
        .score-cell {
            min-width: 100px;
            text-align: center;
        }
        .score-cell span {
            font-weight: 700;
            font-size: 1.1rem;
            padding: 2px 8px;
            border-radius: 4px;
        }
        /* Style cho tr·∫°ng th√°i */
        .status-chua-dau { background-color: #fef3c7; color: #b45309; } /* V√†ng nh·∫°t */
        .status-dang-dau { 
            background-color: #bfdbfe; 
            color: #1d4ed8; 
            animation: pulse 1.5s infinite; /* Hi·ªáu ·ª©ng nh·∫•p nh√°y nh·∫π */
        } 
        .status-ket-thuc { background-color: #d1fae5; color: #065f46; } /* Xanh l√° nh·∫°t */
        
        @keyframes pulse {
            0% { box-shadow: 0 0 0 0 rgba(29, 78, 216, 0.4); }
            70% { box-shadow: 0 0 0 10px rgba(29, 78, 216, 0); }
            100% { box-shadow: 0 0 0 0 rgba(29, 78, 216, 0); }
        }

        .match-card {
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
            transition: transform 0.2s;
        }
        .match-card:hover {
            transform: translateY(-2px);
        }
        .standings-table th {
            background-color: #374151; /* Dark Gray */
            color: white;
            position: sticky;
            top: 0;
        }
        .winner {
            font-weight: 800;
            color: #d97706; /* Amber */
        }
    </style>
</head>
<body class="p-4 md:p-8">

    <div class="container mx-auto max-w-7xl">
        <header class="text-center mb-8">
            <h1 class="text-4xl font-extrabold text-primary sm:text-5xl">
                B·∫£ng T·ªâ S·ªë & X·∫øp H·∫°ng Gi·∫£i Pickleball
            </h1>
            <p id="last-updated" class="text-sm text-gray-500 mt-2">
                L·∫ßn cu·ªëi c·∫≠p nh·∫≠t: ƒêang t·∫£i...
            </p>
            <div id="loading-indicator" class="mt-2 text-primary font-medium hidden">
                ƒêang t·∫£i d·ªØ li·ªáu m·ªõi...
            </div>
            <div id="error-message" class="mt-2 text-red-600 font-medium hidden p-2 bg-red-100 rounded-lg">
                L·ªói: Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu. Vui l√≤ng ki·ªÉm tra URL v√† k·∫øt n·ªëi.
            </div>
        </header>

        <!-- T·ªîNG K·∫æT CHUNG K·∫æT V√Ä B√ÅN K·∫æT -->
        <section class="mb-10 p-6 bg-white rounded-xl shadow-inner border border-gray-200">
            <h2 class="text-2xl font-bold text-gray-700 mb-4 border-b pb-2 flex items-center">
                üèÜ V√≤ng Chung K·∫øt
            </h2>
            <div id="final-results" class="text-center space-y-3 font-semibold text-lg">
                <p id="final-winner" class="text-primary text-xl">V√¥ ƒë·ªãch: ƒêang ch·ªù...</p>
                <p id="final-runnerup" class="text-secondary">√Å qu√¢n: ƒêang ch·ªù...</p>
            </div>

            <div class="mt-6">
                <h3 class="text-xl font-bold text-gray-700 mb-3 border-b-2 border-accent pb-1">
                    Tr·∫≠n ƒê·∫•u Lo·∫°i Tr·ª±c Ti·∫øp
                </h3>
                <div id="elimination-matches" class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <!-- N·ªôi dung B√°n k·∫øt v√† Chung k·∫øt s·∫Ω ƒë∆∞·ª£c ch√®n b·ªüi JavaScript -->
                </div>
            </div>
        </section>

        <!-- B·∫¢NG X·∫æP H·∫†NG V√Ä L·ªäCH THI ƒê·∫§U V√íNG B·∫¢NG -->
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
            
            <!-- GROUP A (MIXED) -->
            <div class="space-y-6">
                <h2 class="text-2xl font-bold text-gray-700 mb-4 border-b-2 border-primary pb-2">
                    B·∫£ng A (ƒê√¥i Nam N·ªØ)
                </h2>
                <div id="standings-A" class="bg-white rounded-xl shadow-lg overflow-x-auto">
                    <!-- B·∫£ng x·∫øp h·∫°ng A -->
                </div>
                <div id="matches-A-container" class="grid grid-cols-1 gap-4">
                    <!-- L·ªãch thi ƒë·∫•u A -->
                </div>
            </div>

            <!-- GROUP B (MALE) -->
            <div class="space-y-6">
                <h2 class="text-2xl font-bold text-gray-700 mb-4 border-b-2 border-secondary pb-2">
                    B·∫£ng B (ƒê√¥i Nam)
                </h2>
                <div id="standings-B" class="bg-white rounded-xl shadow-lg overflow-x-auto">
                    <!-- B·∫£ng x·∫øp h·∫°ng B -->
                </div>
                <div id="matches-B-container" class="grid grid-cols-1 gap-4">
                    <!-- L·ªãch thi ƒë·∫•u B -->
                </div>
            </div>
        </div>

    </div>

    <script>
        // *********************************************************************************
        // TH√îNG TIN QUAN TR·ªåNG: C·∫¶N THAY ƒê·ªîI URL D∆Ø·ªöI ƒê√ÇY
        // *********************************************************************************
        // Thay th·∫ø b·∫±ng ƒë∆∞·ªùng d·∫´n RAW c·ªßa file JSON tr√™n GitHub c·ªßa b·∫°n.
        const GITHUB_RAW_JSON_URL = "https://raw.githubusercontent.com/cqtin2024/pickleball/main/data/state.json";
        
        // Th·ªùi gian t·ª± ƒë·ªông l√†m m·ªõi (t√≠nh b·∫±ng mili gi√¢y). 15000ms = 15 gi√¢y
        const REFRESH_INTERVAL = 15000;

        // D·ªØ li·ªáu m·∫´u ban ƒë·∫ßu theo c·∫•u tr√∫c JSON b·∫°n cung c·∫•p
        let currentState = {
            "mixedTeams": ["H·∫≠u/D≈©ng", "H·∫°nh/Ti·∫øn", "Giang/Long", "Huy·ªÅn/Lu√¢n", "Linh/M.H√πng", "H∆∞·ªùng/ƒê·∫°t"],
            "maleTeams": ["Ti·ªáp/Th·ªßy", "Ph∆∞∆°ng/Thanh", "Tri·ªÅu/Minh", "T√≠n/Khi√™m", "√Ånh/To√†n", "Hi·ªÉn/P.H√πng"],
            "matchesA": [
                { "teamA": "Giang/Long", "teamB": "H∆∞·ªùng/ƒê·∫°t", "time": "14:00", "court": "S√¢n 2", "bang": "A", "scoreA": 7, "scoreB": 11, "winner": "H∆∞·ªùng/ƒê·∫°t", "id": "A1", "loser": "Giang/Long" },
                { "teamA": "H·∫≠u/D≈©ng", "teamB": "H·∫°nh/Ti·∫øn", "time": "14:00", "court": "S√¢n 3", "bang": "A", "scoreA": 11, "scoreB": 8, "winner": "H·∫≠u/D≈©ng", "id": "A2", "loser": "H·∫°nh/Ti·∫øn" },
                { "teamA": "Huy·ªÅn/Lu√¢n", "teamB": "Linh/M.H√πng", "time": "14:00", "court": "S√¢n7", "bang": "A", "scoreA": 10, "scoreB": 11, "winner": "Linh/M.H√πng", "id": "A3", "loser": "Huy·ªÅn/Lu√¢n" },
                { "teamA": "H·∫≠u/D≈©ng", "teamB": "H∆∞·ªùng/ƒê·∫°t", "time": "14:15", "court": "S√¢n 3", "bang": "A", "scoreA": 11, "scoreB": 8, "winner": "H·∫≠u/D≈©ng", "id": "A4", "loser": "H∆∞·ªùng/ƒê·∫°t" },
                { "teamA": "Giang/Long", "teamB": "Huy·ªÅn/Lu√¢n", "time": "14:15", "court": "S√¢n7", "bang": "A", "scoreA": 11, "scoreB": 0, "winner": "Giang/Long", "id": "A5", "loser": "Huy·ªÅn/Lu√¢n" },
                { "teamA": "H·∫°nh/Ti·∫øn", "teamB": "Linh/M.H√πng", "time": "14:30", "court": "S√¢n 3", "bang": "A", "scoreA": 8, "scoreB": 11, "winner": "Linh/M.H√πng", "id": "A6", "loser": "H·∫°nh/Ti·∫øn" },
                { "teamA": "Huy·ªÅn/Lu√¢n", "teamB": "H∆∞·ªùng/ƒê·∫°t", "time": "14:45", "court": "S√¢n 2", "bang": "A", "scoreA": 11, "scoreB": 10, "winner": "Huy·ªÅn/Lu√¢n", "id": "A7", "loser": "H∆∞·ªùng/ƒê·∫°t" },
                { "teamA": "H·∫°nh/Ti·∫øn", "teamB": "Giang/Long", "time": "14:45", "court": "S√¢n 3", "bang": "A", "scoreA": 11, "scoreB": 8, "winner": "H·∫°nh/Ti·∫øn", "id": "A8", "loser": "Giang/Long" },
                { "teamA": "H·∫≠u/D≈©ng", "teamB": "Linh/M.H√πng", "time": "14:45", "court": "S√¢n7", "bang": "A", "scoreA": 4, "scoreB": 11, "winner": "Linh/M.H√πng", "id": "A9", "loser": "H·∫≠u/D≈©ng" },
                { "teamA": "Giang/Long", "teamB": "Linh/M.H√πng", "time": "15:15", "court": "S√¢n 3", "bang": "A", "scoreA": 10, "scoreB": 11, "winner": "Linh/M.H√πng", "id": "A10", "loser": "Giang/Long" },
                { "teamA": "H·∫°nh/Ti·∫øn", "teamB": "H∆∞·ªùng/ƒê·∫°t", "time": "15:30", "court": "S√¢n 2", "bang": "A", "scoreA": 11, "scoreB": 5, "winner": "H·∫°nh/Ti·∫øn", "id": "A11", "loser": "H∆∞·ªùng/ƒê·∫°t" },
                { "teamA": "H·∫≠u/D≈©ng", "teamB": "Huy·ªÅn/Lu√¢n", "time": "15:30", "court": "S√¢n 3", "bang": "A", "scoreA": 11, "scoreB": 7, "winner": "H·∫≠u/D≈©ng", "id": "A12", "loser": "Huy·ªÅn/Lu√¢n" },
                { "teamA": "H·∫≠u/D≈©ng", "teamB": "Giang/Long", "time": "16:00", "court": "S√¢n 3", "bang": "A", "scoreA": 10, "scoreB": 11, "winner": "Giang/Long", "id": "A13", "loser": "H·∫≠u/D≈©ng" },
                { "teamA": "H·∫°nh/Ti·∫øn", "teamB": "Huy·ªÅn/Lu√¢n", "time": "16:15", "court": "S√¢n 2", "bang": "A", "scoreA": 11, "scoreB": 2, "winner": "H·∫°nh/Ti·∫øn", "id": "A14", "loser": "Huy·ªÅn/Lu√¢n" },
                { "teamA": "Linh/M.H√πng", "teamB": "H∆∞·ªùng/ƒê·∫°t", "time": "16:15", "court": "S√¢n 3", "bang": "A", "scoreA": 5, "scoreB": 11, "winner": "H∆∞·ªùng/ƒê·∫°t", "id": "A15", "loser": "Linh/M.H√πng" }
            ],
            "matchesB": [
                { "teamA": "Tri·ªÅu/Minh", "teamB": "Hi·ªÉn/P.H√πng", "time": "14:00", "court": "S√¢n 1", "bang": "B", "scoreA": 10, "scoreB": 11, "winner": "Hi·ªÉn/P.H√πng", "id": "B1", "loser": "Tri·ªÅu/Minh" },
                { "teamA": "Ti·ªáp/Th·ªßy", "teamB": "Ph∆∞∆°ng/Thanh", "time": "14:15", "court": "S√¢n 1", "bang": "B", "scoreA": 6, "scoreB": 11, "winner": "Ph∆∞∆°ng/Thanh", "id": "B2", "loser": "Ti·ªáp/Th·ªßy" },
                { "teamA": "T√≠n/Khi√™m", "teamB": "√Ånh/To√†n", "time": "14:15", "court": "S√¢n 2", "bang": "B", "scoreA": 11, "scoreB": 7, "winner": "T√≠n/Khi√™m", "id": "B3", "loser": "√Ånh/To√†n" },
                { "teamA": "Tri·ªÅu/Minh", "teamB": "T√≠n/Khi√™m", "time": "14:30", "court": "S√¢n 1", "bang": "B", "scoreA": 1, "scoreB": 11, "winner": "T√≠n/Khi√™m", "id": "B4", "loser": "Tri·ªÅu/Minh" },
                { "teamA": "Ti·ªáp/Th·ªßy", "teamB": "Hi·ªÉn/P.H√πng", "time": "14:30", "court": "S√¢n 2", "bang": "B", "scoreA": 1, "scoreB": 11, "winner": "Hi·ªÉn/P.H√πng", "id": "B5", "loser": "Ti·ªáp/Th·ªßy" },
                { "teamA": "Ph∆∞∆°ng/Thanh", "teamB": "√Ånh/To√†n", "time": "14:30", "court": "S√¢n7", "bang": "B", "scoreA": 0, "scoreB": 11, "winner": "√Ånh/To√†n", "id": "B6", "loser": "Ph∆∞∆°ng/Thanh" },
                { "teamA": "Ti·ªáp/Th·ªßy", "teamB": "√Ånh/To√†n", "time": "15:00", "court": "S√¢n 2", "bang": "B", "scoreA": 3, "scoreB": 11, "winner": "√Ånh/To√†n", "id": "B7", "loser": "Ti·ªáp/Th·ªßy" },
                { "teamA": "T√≠n/Khi√™m", "teamB": "Hi·ªÉn/P.H√πng", "time": "15:00", "court": "S√¢n 3", "bang": "B", "scoreA": 11, "scoreB": 5, "winner": "T√≠n/Khi√™m", "id": "B8", "loser": "Hi·ªÉn/P.H√πng" },
                { "teamA": "Ph∆∞∆°ng/Thanh", "teamB": "Tri·ªÅu/Minh", "time": "15:15", "court": "S√¢n 2", "bang": "B", "scoreA": 1, "scoreB": 11, "winner": "Tri·ªÅu/Minh", "id": "B9", "loser": "Ph∆∞∆°ng/Thanh" },
                { "teamA": "Ti·ªáp/Th·ªßy", "teamB": "T√≠n/Khi√™m", "time": "15:45", "court": "S√¢n 2", "bang": "B", "scoreA": 11, "scoreB": 7, "winner": "Ti·ªáp/Th·ªßy", "id": "B10", "loser": "T√≠n/Khi√™m" },
                { "teamA": "Ph∆∞∆°ng/Thanh", "teamB": "Hi·ªÉn/P.H√πng", "time": "15:45", "court": "S√¢n 3", "bang": "B", "scoreA": 5, "scoreB": 11, "winner": "Hi·ªÉn/P.H√πng", "id": "B11", "loser": "Ph∆∞∆°ng/Thanh" },
                { "teamA": "Tri·ªÅu/Minh", "teamB": "√Ånh/To√†n", "time": "16:00", "court": "S√¢n 2", "bang": "B", "scoreA": 4, "scoreB": 11, "winner": "√Ånh/To√†n", "id": "B12", "loser": "Tri·ªÅu/Minh" },
                { "teamA": "Ti·ªáp/Th·ªßy", "teamB": "Tri·ªÅu/Minh", "time": "16:30", "court": "S√¢n 2", "bang": "B", "scoreA": 11, "scoreB": 6, "winner": "Ti·ªáp/Th·ªßy", "id": "B13", "loser": "Tri·ªÅu/Minh" },
                { "teamA": "√Ånh/To√†n", "teamB": "Hi·ªÉn/P.H√πng", "time": "16:30", "court": "S√¢n 3", "bang": "B", "scoreA": 11, "scoreB": 3, "winner": "√Ånh/To√†n", "id": "B14", "loser": "Hi·ªÉn/P.H√πng" },
                { "teamA": "Ph∆∞∆°ng/Thanh", "teamB": "T√≠n/Khi√™m", "time": "16:45", "court": "S√¢n 2", "bang": "B", "scoreA": 8, "scoreB": 11, "winner": "T√≠n/Khi√™m", "id": "B15", "loser": "Ph∆∞∆°ng/Thanh" }
            ],
            "semifinals": [
                { "id": "SF1", "teamA": "Linh/M.H√πng", "teamB": "H·∫≠u/D≈©ng", "scoreA": 15, "scoreB": 12, "time": "16:30", "court": "S√¢n 3", "winner": "Linh/M.H√πng", "loser": "H·∫≠u/D≈©ng" },
                { "id": "SF2", "teamA": "T√≠n/Khi√™m", "teamB": "√Ånh/To√†n", "scoreA": 14, "scoreB": 14, "time": "16:30", "court": "S√¢n 3", "winner": null, "loser": null }
            ],
            "final": { "id": "F", "teamA": "Linh/M.H√πng", "teamB": "Th·∫Øng SF2", "scoreA": null, "scoreB": null, "time": "17:00", "court": "S√¢n 3", "winner": null, "runnerUp": null },
            lastUpdated: null
        };

        // H√†m l·∫•y d·ªØ li·ªáu t·ª´ URL v√† c·∫≠p nh·∫≠t tr·∫°ng th√°i
        async function fetchData() {
            const loadingIndicator = document.getElementById('loading-indicator');
            const errorMessage = document.getElementById('error-message');
            
            loadingIndicator.classList.remove('hidden');
            errorMessage.classList.add('hidden');

            try {
                const response = await fetch(GITHUB_RAW_JSON_URL, { cache: 'no-store' });
                
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                
                const data = await response.json();

                data.lastUpdated = new Date().toLocaleTimeString('vi-VN');
                currentState = data;
                
                renderAll();
                
            } catch (error) {
                console.error("L·ªói khi t·∫£i d·ªØ li·ªáu:", error);
                errorMessage.textContent = `L·ªói t·∫£i d·ªØ li·ªáu: ${error.message}. Hi·ªÉn th·ªã d·ªØ li·ªáu m·∫´u.`;
                errorMessage.classList.remove('hidden');
                
                // V·∫´n render d·ªØ li·ªáu m·∫´u n·∫øu t·∫£i th·∫•t b·∫°i
                renderAll(); 
            } finally {
                loadingIndicator.classList.add('hidden');
            }
        }

        // --- H√ÄM X·ª¨ L√ù T√çNH TO√ÅN B·∫¢NG X·∫æP H·∫†NG ---
        function calculateStandings(teams, matches) {
            const standings = {};
            
            // Kh·ªüi t·∫°o b·∫£ng x·∫øp h·∫°ng
            teams.forEach(team => {
                standings[team] = {
                    team,
                    wins: 0,
                    losses: 0,
                    pointsW: 0,
                    pointsL: 0,
                    diff: 0,
                    scoreA: 0, // D√†nh cho vi·ªác s·∫Øp x·∫øp trong tr∆∞·ªùng h·ª£p h√≤a
                    scoreB: 0,
                };
            });

            // X·ª≠ l√Ω t·ª´ng tr·∫≠n ƒë·∫•u ƒë√£ k·∫øt th√∫c
            matches.forEach(match => {
                const { teamA, teamB, scoreA, scoreB, winner, loser } = match;

                // Ch·ªâ t√≠nh c√°c tr·∫≠n ƒë√£ c√≥ t·ªâ s·ªë h·ª£p l·ªá
                if (scoreA !== null && scoreB !== null && scoreA >= 0 && scoreB >= 0) {
                    const statsA = standings[teamA];
                    const statsB = standings[teamB];

                    if (statsA && statsB) {
                        statsA.pointsW += scoreA;
                        statsA.pointsL += scoreB;
                        statsB.pointsW += scoreB;
                        statsB.pointsL += scoreA;

                        if (winner === teamA) {
                            statsA.wins += 1;
                            statsB.losses += 1;
                        } else if (winner === teamB) {
                            statsB.wins += 1;
                            statsA.losses += 1;
                        }
                    }
                }
            });

            // T√≠nh hi·ªáu s·ªë v√† ƒëi·ªÉm
            const result = Object.values(standings).map(team => {
                team.diff = team.pointsW - team.pointsL;
                team.points = team.wins * 3 + team.diff; // V√≠ d·ª•: 3 ƒëi·ªÉm/th·∫Øng
                return team;
            });

            // S·∫Øp x·∫øp: 1. Th·∫Øng nhi·ªÅu nh·∫•t, 2. Hi·ªáu s·ªë cao nh·∫•t, 3. T·ªïng ƒëi·ªÉm th·∫Øng cao nh·∫•t
            result.sort((a, b) => {
                if (b.wins !== a.wins) return b.wins - a.wins;
                if (b.diff !== a.diff) return b.diff - a.diff;
                return b.pointsW - a.pointsW;
            });

            return result;
        }

        // --- H√ÄM RENDER B·∫¢NG X·∫æP H·∫†NG ---
        function renderStandings(standingsData, containerId) {
            const container = document.getElementById(containerId);

            if (!standingsData || standingsData.length === 0) {
                container.innerHTML = `<p class="p-4 text-gray-500">Ch∆∞a c√≥ th√¥ng tin ƒë·ªôi.</p>`;
                return;
            }

            let html = `
                <table class="w-full text-sm text-left standings-table">
                    <thead>
                        <tr>
                            <th scope="col" class="px-3 py-2 rounded-tl-xl">#</th>
                            <th scope="col" class="px-3 py-2">ƒê·ªôi</th>
                            <th scope="col" class="px-3 py-2 text-center">T</th>
                            <th scope="col" class="px-3 py-2 text-center">B</th>
                            <th scope="col" class="px-3 py-2 text-center">ƒê</th>
                            <th scope="col" class="px-3 py-2 text-center">Hs</th>
                            <th scope="col" class="px-3 py-2 text-center rounded-tr-xl">ƒêi·ªÉm Th·∫Øng</th>
                        </tr>
                    </thead>
                    <tbody>
            `;

            standingsData.forEach((team, index) => {
                // ƒê√°nh d·∫•u 2 ƒë·ªôi d·∫´n ƒë·∫ßu (v√≠ d·ª•: v√†o b√°n k·∫øt)
                const rowClass = index < 2 ? 'bg-yellow-50 font-bold' : 'bg-white';
                
                html += `
                    <tr class="${rowClass} border-b hover:bg-gray-50">
                        <td class="px-3 py-2 font-medium text-gray-900 whitespace-nowrap">${index + 1}</td>
                        <td class="px-3 py-2 truncate">${team.team}</td>
                        <td class="px-3 py-2 text-center text-primary">${team.wins}</td>
                        <td class="px-3 py-2 text-center text-red-600">${team.losses}</td>
                        <td class="px-3 py-2 text-center">${team.wins + team.losses}</td>
                        <td class="px-3 py-2 text-center ${team.diff > 0 ? 'text-green-600' : team.diff < 0 ? 'text-red-600' : 'text-gray-500'}">${team.diff}</td>
                        <td class="px-3 py-2 text-center">${team.pointsW}</td>
                    </tr>
                `;
            });

            html += `</tbody></table>`;
            container.innerHTML = html;
        }


        // --- H√ÄM RENDER TR·∫¨N ƒê·∫§U V√íNG B·∫¢NG (GROUP) ---
        function renderGroupMatches(matches, containerId, primaryColor) {
            const container = document.getElementById(containerId);
            let htmlContent = '';

            if (!matches || matches.length === 0) {
                container.innerHTML = `<p class="text-center text-gray-600 col-span-full p-4 bg-white rounded-lg">
                    Ch∆∞a c√≥ l·ªãch thi ƒë·∫•u v√≤ng b·∫£ng.
                </p>`;
                return;
            }

            matches.forEach(match => {
                const teamA_score = match.scoreA !== null ? match.scoreA : '‚Äî';
                const teamB_score = match.scoreB !== null ? match.scoreB : '‚Äî';
                
                let statusClass = 'status-chua-dau font-medium';
                let statusText = 'Ch∆∞a ƒë·∫•u';
                let winnerA_class = 'text-gray-800';
                let winnerB_class = 'text-gray-800';

                if (match.scoreA !== null && match.scoreB !== null) {
                    const scoreA = parseInt(match.scoreA);
                    const scoreB = parseInt(match.scoreB);
                    
                    if (match.winner) {
                        statusText = `K·∫øt th√∫c (${match.winner} Th·∫Øng)`;
                        statusClass = 'status-ket-thuc font-semibold';
                        if (match.winner === match.teamA) {
                            winnerA_class = 'winner';
                        } else {
                            winnerB_class = 'winner';
                        }
                    } else if (scoreA > 0 || scoreB > 0) {
                        // Tr·∫≠n ƒë·∫•u ƒëang di·ªÖn ra ho·∫∑c h√≤a, ch∆∞a c√≥ ng∆∞·ªùi th·∫Øng ch√≠nh th·ª©c
                         statusText = 'ƒêang ƒë·∫•u';
                         statusClass = 'status-dang-dau font-semibold';
                    }
                }

                htmlContent += `
                    <div class="match-card bg-white p-4 rounded-xl border-t-4 hover:border-secondary" style="border-color: ${primaryColor}">
                        <div class="flex justify-between items-center border-b pb-2 mb-3">
                            <span class="text-sm font-semibold text-gray-500">B·∫£ng ${match.bang} - Tr·∫≠n ${match.id}</span>
                            <span class="${statusClass} text-xs px-3 py-1 rounded-full">${statusText}</span>
                        </div>
                        
                        <div class="grid grid-cols-5 gap-2 items-center text-lg font-medium">
                            <!-- Team A -->
                            <div class="col-span-2 text-right truncate">
                                <span class="${winnerA_class}">${match.teamA}</span>
                            </div>
                            <div class="col-span-1 text-center score-cell">
                                <span class="bg-gray-200 text-gray-800 rounded-lg">${teamA_score}</span>
                                <span class="mx-1 text-base text-gray-400">-</span>
                                <span class="bg-gray-200 text-gray-800 rounded-lg">${teamB_score}</span>
                            </div>
                            <!-- Team B -->
                            <div class="col-span-2 text-left truncate">
                                <span class="${winnerB_class}">${match.teamB}</span>
                            </div>
                        </div>

                        <div class="mt-3 pt-3 border-t border-dashed text-sm text-gray-500 flex justify-between">
                            <span class="flex items-center">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1 text-blue-500" viewBox="0 0 20 20" fill="currentColor">
                                    <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l3 3a1 1 0 001.414-1.414L11 9.586V6z" clip-rule="evenodd" />
                                </svg>
                                ${match.time}
                            </span>
                            <span class="flex items-center">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1 text-red-500" viewBox="0 0 20 20" fill="currentColor">
                                    <path fill-rule="evenodd" d="M5.05 4.05a7 7 0 119.9 9.9L10 18.9l-4.95-4.95a7 7 0 010-9.9zM10 11a2 2 0 100-4 2 2 0 000 4z" clip-rule="evenodd" />
                                </svg>
                                ${match.court}
                            </span>
                        </div>
                    </div>
                `;
            });

            container.innerHTML = htmlContent;
        }
        
        // --- H√ÄM RENDER TR·∫¨N ƒê·∫§U LO·∫†I TR·ª∞C TI·∫æP (SF, FINAL) ---
        function renderEliminationMatches(matches, finalMatch) {
            const container = document.getElementById('elimination-matches');
            let htmlContent = '';

            // Render B√°n k·∫øt
            matches.forEach(match => {
                const teamA_score = match.scoreA !== null ? match.scoreA : '‚Äî';
                const teamB_score = match.scoreB !== null ? match.scoreB : '‚Äî';
                
                let winnerA_class = match.winner === match.teamA ? 'winner' : 'text-gray-700';
                let winnerB_class = match.winner === match.teamB ? 'winner' : 'text-gray-700';

                let statusText = match.winner ? `K·∫øt th√∫c: ${match.winner}` : 'ƒêang ch·ªù/ƒêang ƒë·∫•u';
                let statusClass = match.winner ? 'status-ket-thuc' : 'status-dang-dau';
                if (match.scoreA === null && match.scoreB === null) {
                    statusClass = 'status-chua-dau';
                    statusText = 'Ch∆∞a ƒë·∫•u';
                }

                htmlContent += `
                    <div class="match-card p-4 rounded-xl border-t-4 border-accent bg-blue-50">
                        <div class="flex justify-between items-center border-b pb-2 mb-3">
                            <span class="text-sm font-semibold text-gray-500">B√°n k·∫øt ${match.id}</span>
                            <span class="${statusClass} text-xs px-3 py-1 rounded-full">${statusText}</span>
                        </div>
                        
                        <div class="space-y-2 text-md font-medium">
                            <div class="flex justify-between items-center p-1 bg-white rounded-md border">
                                <span class="${winnerA_class} truncate">${match.teamA}</span>
                                <span class="font-bold text-lg">${teamA_score}</span>
                            </div>
                            <div class="flex justify-between items-center p-1 bg-white rounded-md border">
                                <span class="${winnerB_class} truncate">${match.teamB}</span>
                                <span class="font-bold text-lg">${teamB_score}</span>
                            </div>
                        </div>

                        <p class="text-xs text-gray-500 mt-2">Gi·ªù: ${match.time} - S√¢n: ${match.court}</p>
                    </div>
                `;
            });

            // Render Chung k·∫øt
            const finalA_score = finalMatch.scoreA !== null ? finalMatch.scoreA : '‚Äî';
            const finalB_score = finalMatch.scoreB !== null ? finalMatch.scoreB : '‚Äî';
            
            let finalWinnerA_class = finalMatch.winner === finalMatch.teamA ? 'winner' : 'text-gray-700';
            let finalWinnerB_class = finalMatch.winner === finalMatch.teamB ? 'winner' : 'text-gray-700';
            
            let finalStatusText = finalMatch.winner ? `V√¥ ƒë·ªãch: ${finalMatch.winner}` : 'ƒêang ch·ªù/ƒêang ƒë·∫•u';
            let finalStatusClass = finalMatch.winner ? 'status-ket-thuc' : 'status-dang-dau';
            if (finalMatch.scoreA === null && finalMatch.scoreB === null) {
                finalStatusClass = 'status-chua-dau';
                finalStatusText = 'Ch∆∞a ƒë·∫•u';
            }
            
            htmlContent += `
                <div class="match-card p-4 rounded-xl border-t-4 border-secondary bg-orange-50">
                    <div class="flex justify-between items-center border-b pb-2 mb-3">
                        <span class="text-lg font-bold text-secondary">ü•á CHUNG K·∫æT</span>
                        <span class="${finalStatusClass} text-xs px-3 py-1 rounded-full">${finalStatusText}</span>
                    </div>
                    
                    <div class="space-y-2 text-md font-medium">
                        <div class="flex justify-between items-center p-1 bg-white rounded-md border">
                            <span class="${finalWinnerA_class} truncate">${finalMatch.teamA}</span>
                            <span class="font-bold text-lg">${finalA_score}</span>
                        </div>
                        <div class="flex justify-between items-center p-1 bg-white rounded-md border">
                            <span class="${finalWinnerB_class} truncate">${finalMatch.teamB}</span>
                            <span class="font-bold text-lg">${finalB_score}</span>
                        </div>
                    </div>

                    <p class="text-xs text-gray-500 mt-2">Gi·ªù: ${finalMatch.time} - S√¢n: ${finalMatch.court}</p>
                </div>
            `;
            container.innerHTML = htmlContent;

            // C·∫≠p nh·∫≠t t·ªïng k·∫øt chung k·∫øt
            document.getElementById('final-winner').innerHTML = finalMatch.winner 
                ? `<span class="text-primary text-xl font-extrabold">ü•á V√¥ ƒë·ªãch: ${finalMatch.winner}</span>`
                : 'V√¥ ƒë·ªãch: ƒêang ch·ªù...';
            document.getElementById('final-runnerup').innerHTML = finalMatch.runnerUp 
                ? `<span class="text-secondary font-bold">ü•à √Å qu√¢n: ${finalMatch.runnerUp}</span>`
                : '√Å qu√¢n: ƒêang ch·ªù...';

            if (finalMatch.winner && !finalMatch.runnerUp) {
                // N·∫øu ch·ªâ c√≥ winner, runnerUp l√† ƒë·ªôi c√≤n l·∫°i
                const runnerUp = finalMatch.teamA === finalMatch.winner ? finalMatch.teamB : finalMatch.teamA;
                if (runnerUp.startsWith('Th·∫Øng')) {
                     document.getElementById('final-runnerup').innerHTML = `<span class="text-secondary font-bold">ü•à √Å qu√¢n: ${runnerUp}</span>`;
                } else {
                     document.getElementById('final-runnerup').innerHTML = `<span class="text-secondary font-bold">ü•à √Å qu√¢n: ${runnerUp}</span>`;
                }
            }
        }


        // --- H√ÄM T·ªîNG H·ª¢P RENDER T·∫§T C·∫¢ ---
        function renderAll() {
            const lastUpdatedElement = document.getElementById('last-updated');
            lastUpdatedElement.textContent = `L·∫ßn cu·ªëi c·∫≠p nh·∫≠t: ${currentState.lastUpdated || 'Ch∆∞a c√≥ th√¥ng tin'}`;

            // 1. T√≠nh to√°n v√† Render B·∫£ng X·∫øp H·∫°ng
            const standingsA = calculateStandings(currentState.mixedTeams, currentState.matchesA);
            const standingsB = calculateStandings(currentState.maleTeams, currentState.matchesB);

            renderStandings(standingsA, 'standings-A');
            renderStandings(standingsB, 'standings-B');

            // 2. Render V√≤ng B·∫£ng
            renderGroupMatches(currentState.matchesA, 'matches-A-container', '#059669'); // Primary color for A
            renderGroupMatches(currentState.matchesB, 'matches-B-container', '#f97316'); // Secondary color for B

            // 3. Render V√≤ng Lo·∫°i Tr·ª±c Ti·∫øp (B√°n k·∫øt v√† Chung k·∫øt)
            renderEliminationMatches(currentState.semifinals || [], currentState.final || {});
        }


        // Kh·ªüi t·∫°o ·ª©ng d·ª•ng
        document.addEventListener('DOMContentLoaded', () => {
            // Hi·ªÉn th·ªã l·ªãch thi ƒë·∫•u m·∫´u tr∆∞·ªõc khi t·∫£i d·ªØ li·ªáu th·ª±c t·∫ø
            currentState.lastUpdated = 'D·ªØ li·ªáu m·∫´u';
            renderAll(); 
            
            // B·∫Øt ƒë·∫ßu t·∫£i d·ªØ li·ªáu l·∫ßn ƒë·∫ßu
            fetchData();
            
            // Thi·∫øt l·∫≠p interval ƒë·ªÉ t·ª± ƒë·ªông t·∫£i l·∫°i d·ªØ li·ªáu
            setInterval(fetchData, REFRESH_INTERVAL);
        });
    </script>
</body>
</html>
